/*
Глава III
Обзор

Вот что вам нужно знать, если вы хотите добиться успеха в этом задании:

• Один или несколько философов сидят за круглым столом. В центре стола стоит большая миска со спагетти.

• Философы поочередно едят, думают или спят. Когда они едят, они не думают и не спят; 
когда они думают, они не едят и не спят; и, конечно, во время сна они не едят и не думают.

• На столе также есть вилки. Их столько же, сколько философов.

• Поскольку подавать и есть спагетти только одной вилкой очень неудобно, 
философ берет для еды правую и левую вилки, по одной в каждую руку.

• Когда философ заканчивает есть, он кладет свои вилки обратно на стол и начинает спать. 
Проснувшись, они снова начинают думать. Симуляция прекращается, когда философ умирает от голода.

• Каждый философ должен есть и никогда не должен голодать.

• Философы не разговаривают друг с другом.

• Философы не знают, скоро ли умрет другой философ.

• Нет необходимости говорить, что философы должны избегать смерти!

Глава IV
Глобальные правила

Вы должны написать программу для обязательной части и еще одну для бонусной части 
(если вы решите выполнить бонусную часть). Они оба должны соблюдать следующие правила:

• Глобальные переменные запрещены!

• Ваша(и) программа(ы) должна(ы) принимать следующие аргументы:
(1)количество_философов; (2)время, чтобы умереть; (3)время, чтобы поесть; (4)время, чтобы поспать; 
(5)[количество_ времени, когда каждый_философ_ должен_ есть]

(1)◦ number_of_philosophers: количество философов, а также количество вилок.

(2)◦ time_to_die (в миллисекундах): Если философ не начал есть time_to_die за миллисекунды 
с начала своего последнего приема пищи или начала симуляции, он умирает.

(3)◦ time_to_eat (в миллисекундах): время, необходимое философу, чтобы поесть. 
В течение этого времени им нужно будет держать две вилки.

(4)◦ time_to_sleep (в миллисекундах): время, которое философ проведет во сне.

(5)◦ number_of_times_each_philosopher_must_eat (необязательный аргумент): 
Если все философы съели по крайней мере number_of_times_each_philosopher_must_eat раз, 
моделирование останавливается. Если не указано иное, симуляция прекращается, когда
философ умирает.

• У каждого философа есть номер в диапазоне от 1 до number_of_philosophers.

• Философ номер 1 сидит рядом с философом номер number_of_philosophers. Любой другой философ 
с номером N находится между номером философа N - 1 и номером философа N + 1
(то есть нумерация произвольная - и по часовой, и против).
О журналах вашей программы:
• Любое изменение состояния философа должно быть отформатировано следующим образом:
◦ timestamp_in_ms X взял вилку
◦ timestamp_in_ms X ест
◦ временная метка_in_ms X находится в спящем режиме
◦ timestamp_in_ms X думает
◦ timestamp_in_ms X умер
Замените timestamp_in_ms на текущую временную метку в миллисекундах, а X - на номер философа.

• Отображаемое сообщение о состоянии не должно быть перепутано с другим сообщением.
• Сообщение о смерти философа должно отображаться не более чем через 10 мс
после фактической смерти философа.
• Опять же, философы должны избегать смерти!

В вашей программе не должно быть никаких скачков данных.

Глава V
Обязательная часть

Конкретными правилами для обязательной части являются:

• Каждый философ должен быть нитью.

• Между каждой парой философов есть одна вилка. Поэтому, если есть несколько философов, 
у каждого философа есть вилка с левой стороны и вилка с правой стороны. Если есть только один философ, 
на столе должна быть только одна вилка.

• Чтобы философы не дублировали форки, вы должны защитить состояние форков с помощью мьютекса для 
каждого из них.

//

Глава VI
Бонусная часть

Описание
Философы с процессами и семафорами

Программа бонусной части принимает те же аргументы, что и обязательная программа.
Он должен соответствовать требованиям главы о глобальных правилах.

Конкретные правила для бонусной части следующие:

• Все вилки кладутся на середину стола.

• * У них нет состояний в памяти, но количество доступных форков представлено семафором.

• Каждый философ должен быть процессом. Но главный процесс не должен быть философским.

Бонусная часть будет начислена только в том случае, если обязательная часть
идеальный. Идеальный означает, что обязательная часть была выполнена полностью 
и работает без сбоев. Если вы не выполнили ВСЕ обязательные требования, 
ваша бонусная часть вообще не будет оцениваться.
*/
